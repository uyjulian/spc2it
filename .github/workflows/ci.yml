{
  "name": "Continuous Integration",
  "on": {
    "push": {
      "paths": [
        "**.c",
        "**.h",
        "**.cpp",
        "**.hpp",
        "**.build",
        "**.in",
        "**.yml"
      ]
    },
    "pull_request": {
      "paths": [
        "**.c",
        "**.h",
        "**.cpp",
        "**.hpp",
        "**.build",
        "**.in",
        "**.yml"
      ]
    }
  },
  "env": {
    "CMAKE_GENERATOR": "Ninja",
    "HOMEBREW_NO_ANALYTICS": "1",
    "HOMEBREW_NO_AUTO_UPDATE": "1",
    "HOMEBREW_NO_INSTALL_UPGRADE": "1",
    "HOMEBREW_NO_INSTALL_CLEANUP": "1",
    "DEBIAN_FRONTEND": "noninteractive",
    "TZ": "Japan"
  },
  "jobs": {
    "build-ubuntu": {
      "runs-on": "ubuntu-latest",
      "timeout-minutes": 20,
      "container": {
        "image": "ubuntu:20.04",
        "options": "--user 0"
      },
      "steps": [
        {
          "run": "apt-get -y update && apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install build-essential git"
        },
        {
          "uses": "actions/checkout@v4",
          "with": {
            "submodules": "recursive"
          }
        },
        {
          "uses": "actions/setup-python@v5",
          "with": {
            "python-version": "3.13.3"
          }
        },
        {
          "uses": "actions/cache@v3",
          "with": {
            "path": "~/.cache/pip",
            "key": "${{ runner.os }}-pip",
            "restore-keys": "${{ runner.os }}-pip\n"
          }
        },
        {
          "run": "python -m pip install --upgrade meson ninja"
        },
        {
          "run": "meson setup build/"
        },
        {
          "run": "meson compile -C build"
        },
        {
          "uses": "actions/upload-artifact@v4",
          "with": {
            "name": "${{ github.event.repository.name }}-ubuntu",
            "path": "build/spc2it"
          }
        }
      ]
    },
    "build-win32": {
      "runs-on": "ubuntu-latest",
      "timeout-minutes": 20,
      "container": {
        "image": "ubuntu:20.04",
        "options": "--user 0"
      },
      "steps": [
        {
          "run": "apt-get -y update && apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install build-essential mingw-w64 git"
        },
        {
          "uses": "actions/checkout@v4",
          "with": {
            "submodules": "recursive"
          }
        },
        {
          "run": "update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix"
        },
        {
          "run": "update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix"
        },
        {
          "uses": "actions/setup-python@v5",
          "with": {
            "python-version": "3.13.3"
          }
        },
        {
          "uses": "actions/cache@v3",
          "with": {
            "path": "~/.cache/pip",
            "key": "${{ runner.os }}-pip",
            "restore-keys": "${{ runner.os }}-pip\n"
          }
        },
        {
          "run": "python -m pip install --upgrade meson ninja"
        },
        {
          "run": "meson setup build/ --cross-file ./external/meson_toolchains/mingw32_meson.ini"
        },
        {
          "run": "meson compile -C build"
        },
        {
          "uses": "actions/upload-artifact@v4",
          "with": {
            "name": "${{ github.event.repository.name }}-win32",
            "path": "build/spc2it.exe"
          }
        }
      ]
    },
    "build-macos": {
      "runs-on": "macos-latest",
      "timeout-minutes": 20,
      "steps": [
        {
          "uses": "actions/checkout@v4",
          "with": {
            "submodules": "recursive"
          }
        },
        {
          "uses": "actions/setup-python@v5",
          "with": {
            "python-version": "3.x"
          }
        },
        {
          "uses": "actions/cache@v3",
          "with": {
            "path": "~/.cache/pip",
            "key": "${{ runner.os }}-pip",
            "restore-keys": "${{ runner.os }}-pip\n"
          }
        },
        {
          "run": "python -m pip install --upgrade meson ninja"
        },
        {
          "run": "meson setup build/"
        },
        {
          "run": "meson compile -C build"
        },
        {
          "uses": "actions/upload-artifact@v4",
          "with": {
            "name": "${{ github.event.repository.name }}-macos",
            "path": "build/spc2it"
          }
        }
      ]
    },
    "create-release": {
      "needs": [
        "build-ubuntu",
        "build-win32",
        "build-macos"
      ],
      "runs-on": "ubuntu-latest",
      "timeout-minutes": 20,
      "container": {
        "image": "ubuntu:20.04",
        "options": "--user 0"
      },
      "if": "startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master'",
      "steps": [
        {
          "name": "Download all artifact",
          "uses": "actions/download-artifact@v4"
        },
        {
          "name": "Set up p7zip",
          "run": "apt-get -y update && apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install p7zip-full"
        },
        {
          "name": "Prepare artifacts for release",
          "run": "7z a -tzip ${{ github.event.repository.name }}-ubuntu.zip ${{ github.event.repository.name }}-ubuntu/*\n7z a -tzip ${{ github.event.repository.name }}-win32.zip ${{ github.event.repository.name }}-win32/*\n7z a -tzip ${{ github.event.repository.name }}-macos.zip ${{ github.event.repository.name }}-macos/*\n"
        },
        {
          "name": "Create prerelease",
          "if": "github.ref == 'refs/heads/master'",
          "uses": "marvinpinto/action-automatic-releases@latest",
          "with": {
            "repo_token": "${{ secrets.GITHUB_TOKEN }}",
            "prerelease": true,
            "automatic_release_tag": "latest",
            "title": "Latest development builds",
            "files": "${{ github.event.repository.name }}-ubuntu.zip\n${{ github.event.repository.name }}-win32.zip\n${{ github.event.repository.name }}-macos.zip\n"
          }
        },
        {
          "name": "Create release",
          "if": "startsWith(github.ref, 'refs/tags/v')",
          "uses": "marvinpinto/action-automatic-releases@latest",
          "with": {
            "repo_token": "${{ secrets.GITHUB_TOKEN }}",
            "prerelease": "${{ contains(github.ref, '-rc') }}",
            "files": "${{ github.event.repository.name }}-ubuntu.zip\n${{ github.event.repository.name }}-win32.zip\n${{ github.event.repository.name }}-macos.zip\n"
          }
        }
      ]
    }
  }
}
